{"ast":null,"code":"import Repository, { baseAPI, serializeQuery } from './Repository';\n\nclass SearchmezRepository {\n  async getListingSlug(slug) {\n    const reponse = await Repository.get(`${baseAPI}/listing/${slug}`).then(response => {\n      if (response.data && response.data.length > 0) {\n        return {\n          items: response.data\n        };\n      } else {\n        return null;\n      }\n\n      return response.data;\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getListings(params) {\n    const reponse = await Repository.get(`${baseAPI}/listing?${serializeQuery(params)}`).then(response => {\n      return {\n        items: response.data,\n        totalItems: response.data.length\n      };\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async login() {\n    setLoading(true);\n\n    if (email && password) {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      };\n      const reponse = await Repository.post(`${baseAPI}/login`, requestOptions).then(response => {\n        console.log(response);\n        return;\n        return {\n          items: response.data,\n          totalItems: response.data.length\n        };\n      }).catch(error => ({\n        error: JSON.stringify(error)\n      }));\n      return reponse;\n    }\n  }\n\n}\n\nexport default new SearchmezRepository();","map":{"version":3,"sources":["/Users/hung.vt/Documents/Hungvotan/Projects/searchmez/FrontEnd_SearchmEZ/repositories/SearchmezRepository.js"],"names":["Repository","baseAPI","serializeQuery","SearchmezRepository","getListingSlug","slug","reponse","get","then","response","data","length","items","catch","error","console","log","JSON","stringify","getListings","params","totalItems","login","setLoading","email","password","requestOptions","method","headers","body","post"],"mappings":"AAAA,OAAOA,UAAP,IAAoBC,OAApB,EAA6BC,cAA7B,QAAkD,cAAlD;;AAEA,MAAMC,mBAAN,CAA0B;AACtB,QAAMC,cAAN,CAAqBC,IAArB,EAA2B;AACvB,UAAMC,OAAO,GAAG,MAAMN,UAAU,CAACO,GAAX,CACjB,GAAEN,OAAQ,YAAWI,IAAK,EADT,EAGjBG,IAHiB,CAGXC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAC3C,eAAO;AAAEC,UAAAA,KAAK,EAAEH,QAAQ,CAACC;AAAlB,SAAP;AACH,OAFD,MAEO;AACH,eAAO,IAAP;AACH;;AACD,aAAOD,QAAQ,CAACC,IAAhB;AACH,KAViB,EAWjBG,KAXiB,CAWVC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAZ;AACA,aAAO,IAAP;AACH,KAdiB,CAAtB;AAeA,WAAOR,OAAP;AACH;;AACD,QAAMa,WAAN,CAAkBC,MAAlB,EAA0B;AACtB,UAAMd,OAAO,GAAG,MAAMN,UAAU,CAACO,GAAX,CACjB,GAAEN,OAAQ,YAAWC,cAAc,CAACkB,MAAD,CAAS,EAD3B,EAGjBZ,IAHiB,CAGXC,QAAD,IAAc;AAChB,aAAO;AACHG,QAAAA,KAAK,EAAEH,QAAQ,CAACC,IADb;AAEHW,QAAAA,UAAU,EAAEZ,QAAQ,CAACC,IAAT,CAAcC;AAFvB,OAAP;AAIH,KARiB,EAUjBE,KAViB,CAUVC,KAAD,KAAY;AAAEA,MAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,KAAZ,CAVW,CAAtB;AAWA,WAAOR,OAAP;AACH;;AACD,QAAMgB,KAAN,GAAc;AACVC,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAIC,KAAK,IAAIC,QAAb,EAAuB;AACnB,YAAMC,cAAc,GAAG;AACnBC,QAAAA,MAAM,EAAE,MADW;AAEnBC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFU;AAGnBC,QAAAA,IAAI,EAAEZ,IAAI,CAACC,SAAL,CAAe;AAAEM,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAAf;AAHa,OAAvB;AAKA,YAAMnB,OAAO,GAAG,MAAMN,UAAU,CAAC8B,IAAX,CACjB,GAAE7B,OAAQ,QADO,EACCyB,cADD,EAGjBlB,IAHiB,CAGXC,QAAD,IAAc;AAChBM,QAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACA;AACA,eAAO;AACHG,UAAAA,KAAK,EAAEH,QAAQ,CAACC,IADb;AAEHW,UAAAA,UAAU,EAAEZ,QAAQ,CAACC,IAAT,CAAcC;AAFvB,SAAP;AAIH,OAViB,EAYjBE,KAZiB,CAYVC,KAAD,KAAY;AAAEA,QAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,OAAZ,CAZW,CAAtB;AAaA,aAAOR,OAAP;AACH;AAEJ;;AAzDqB;;AA4D1B,eAAe,IAAIH,mBAAJ,EAAf","sourcesContent":["import Repository, {baseAPI, serializeQuery} from './Repository';\n\nclass SearchmezRepository {\n    async getListingSlug(slug) {\n        const reponse = await Repository.get(\n            `${baseAPI}/listing/${slug}`\n        )\n            .then((response) => {\n                if (response.data && response.data.length > 0) {\n                    return { items: response.data };\n                } else {\n                    return null;\n                }\n                return response.data;\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n    async getListings(params) {\n        const reponse = await Repository.get(\n            `${baseAPI}/listing?${serializeQuery(params)}`\n        )\n            .then((response) => {\n                return {\n                    items: response.data,\n                    totalItems: response.data.length,\n                };\n            })\n\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n    async login() {\n        setLoading(true);\n        if (email && password) {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ email, password })\n            };\n            const reponse = await Repository.post(\n                `${baseAPI}/login`,requestOptions\n            )\n                .then((response) => {\n                    console.log(response);\n                    return;\n                    return {\n                        items: response.data,\n                        totalItems: response.data.length,\n                    };\n                })\n\n                .catch((error) => ({ error: JSON.stringify(error) }));\n            return reponse;\n        }\n\n    }\n}\n\nexport default new SearchmezRepository();\n"]},"metadata":{},"sourceType":"module"}