{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hung.vt/Documents/Hungvotan/Projects/searchmez/FrontEnd_SearchmEZ/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hung.vt/Documents/Hungvotan/Projects/searchmez/FrontEnd_SearchmEZ/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hung.vt/Documents/Hungvotan/Projects/searchmez/FrontEnd_SearchmEZ/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hung.vt/Documents/Hungvotan/Projects/searchmez/FrontEnd_SearchmEZ/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Repository, { baseAPI, serializeQuery } from './Repository';\n\nvar SearchmezRepository = /*#__PURE__*/function () {\n  function SearchmezRepository() {\n    _classCallCheck(this, SearchmezRepository);\n  }\n\n  _createClass(SearchmezRepository, [{\n    key: \"getListingSlug\",\n    value: function () {\n      var _getListingSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(slug) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Repository.get(\"\".concat(baseAPI, \"/listing/\").concat(slug)).then(function (response) {\n                  if (response.data && response.data.length > 0) {\n                    return {\n                      items: response.data\n                    };\n                  } else {\n                    return null;\n                  }\n\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  console.log(JSON.stringify(error));\n                  return null;\n                });\n\n              case 2:\n                reponse = _context.sent;\n                return _context.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getListingSlug(_x) {\n        return _getListingSlug.apply(this, arguments);\n      }\n\n      return getListingSlug;\n    }()\n  }, {\n    key: \"getListings\",\n    value: function () {\n      var _getListings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Repository.get(\"\".concat(baseAPI, \"/listing?\").concat(serializeQuery(params))).then(function (response) {\n                  return {\n                    items: response.data,\n                    totalItems: response.data.length\n                  };\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context2.sent;\n                return _context2.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getListings(_x2) {\n        return _getListings.apply(this, arguments);\n      }\n\n      return getListings;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(email, password) {\n        var requestOptions, reponse;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                requestOptions = {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    email: email,\n                    password: password\n                  })\n                };\n                _context3.next = 3;\n                return Repository.post(\"\".concat(baseAPI, \"/login\"), requestOptions).then(function (response) {\n                  console.log(response);\n                  return;\n                  return {\n                    items: response.data,\n                    totalItems: response.data.length\n                  };\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 3:\n                reponse = _context3.sent;\n                return _context3.abrupt(\"return\", reponse);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function login(_x3, _x4) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }]);\n\n  return SearchmezRepository;\n}();\n\nexport default new SearchmezRepository();","map":{"version":3,"sources":["/Users/hung.vt/Documents/Hungvotan/Projects/searchmez/FrontEnd_SearchmEZ/repositories/SearchmezRepository.js"],"names":["Repository","baseAPI","serializeQuery","SearchmezRepository","slug","get","then","response","data","length","items","error","console","log","JSON","stringify","reponse","params","totalItems","email","password","requestOptions","method","headers","body","post"],"mappings":";;;;AAAA,OAAOA,UAAP,IAAoBC,OAApB,EAA6BC,cAA7B,QAAkD,cAAlD;;IAEMC,mB;;;;;;;;sGACmBC,I;;;;;;;uBACKJ,UAAU,CAACK,GAAX,WACfJ,OADe,sBACIG,IADJ,GAGjBE,IAHiB,CAGZ,UAACC,QAAD,EAAc;AAChB,sBAAIA,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAC3C,2BAAO;AAAEC,sBAAAA,KAAK,EAAEH,QAAQ,CAACC;AAAlB,qBAAP;AACH,mBAFD,MAEO;AACH,2BAAO,IAAP;AACH;;AACD,yBAAOD,QAAQ,CAACC,IAAhB;AACH,iBAViB,WAWX,UAACG,KAAD,EAAW;AACdC,kBAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAZ;AACA,yBAAO,IAAP;AACH,iBAdiB,C;;;AAAhBK,gBAAAA,O;iDAeCA,O;;;;;;;;;;;;;;;;;;;oGAEOC,M;;;;;;;uBACQjB,UAAU,CAACK,GAAX,WACfJ,OADe,sBACIC,cAAc,CAACe,MAAD,CADlB,GAGjBX,IAHiB,CAGZ,UAACC,QAAD,EAAc;AAChB,yBAAO;AACHG,oBAAAA,KAAK,EAAEH,QAAQ,CAACC,IADb;AAEHU,oBAAAA,UAAU,EAAEX,QAAQ,CAACC,IAAT,CAAcC;AAFvB,mBAAP;AAIH,iBARiB,WAUX,UAACE,KAAD;AAAA,yBAAY;AAAEA,oBAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,mBAAZ;AAAA,iBAVW,C;;;AAAhBK,gBAAAA,O;kDAWCA,O;;;;;;;;;;;;;;;;;;;8FAECG,K,EAAOC,Q;;;;;;AAETC,gBAAAA,c,GAAiB;AACnBC,kBAAAA,MAAM,EAAE,MADW;AAEnBC,kBAAAA,OAAO,EAAE;AAAE,oCAAgB;AAAlB,mBAFU;AAGnBC,kBAAAA,IAAI,EAAEV,IAAI,CAACC,SAAL,CAAe;AAAEI,oBAAAA,KAAK,EAALA,KAAF;AAASC,oBAAAA,QAAQ,EAARA;AAAT,mBAAf;AAHa,iB;;uBAKDpB,UAAU,CAACyB,IAAX,WACfxB,OADe,aACCoB,cADD,EAGjBf,IAHiB,CAGZ,UAACC,QAAD,EAAc;AAChBK,kBAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA;AACA,yBAAO;AACHG,oBAAAA,KAAK,EAAEH,QAAQ,CAACC,IADb;AAEHU,oBAAAA,UAAU,EAAEX,QAAQ,CAACC,IAAT,CAAcC;AAFvB,mBAAP;AAIH,iBAViB,WAYX,UAACE,KAAD;AAAA,yBAAY;AAAEA,oBAAAA,KAAK,EAAEG,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAAT,mBAAZ;AAAA,iBAZW,C;;;AAAhBK,gBAAAA,O;kDAaCA,O;;;;;;;;;;;;;;;;;;;;;AAIf,eAAe,IAAIb,mBAAJ,EAAf","sourcesContent":["import Repository, {baseAPI, serializeQuery} from './Repository';\n\nclass SearchmezRepository {\n    async getListingSlug(slug) {\n        const reponse = await Repository.get(\n            `${baseAPI}/listing/${slug}`\n        )\n            .then((response) => {\n                if (response.data && response.data.length > 0) {\n                    return { items: response.data };\n                } else {\n                    return null;\n                }\n                return response.data;\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n    async getListings(params) {\n        const reponse = await Repository.get(\n            `${baseAPI}/listing?${serializeQuery(params)}`\n        )\n            .then((response) => {\n                return {\n                    items: response.data,\n                    totalItems: response.data.length,\n                };\n            })\n\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n    async login(email, password) {\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email, password })\n        };\n        const reponse = await Repository.post(\n            `${baseAPI}/login`,requestOptions\n        )\n            .then((response) => {\n                console.log(response);\n                return;\n                return {\n                    items: response.data,\n                    totalItems: response.data.length,\n                };\n            })\n\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n}\n\nexport default new SearchmezRepository();\n"]},"metadata":{},"sourceType":"module"}